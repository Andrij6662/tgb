from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import os

# üîê –°—é–¥–∏ –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7345811292:AAHOqOBzidqWsz0YnpE5HJ6S0nMrSXxQXdo"

# üîß ID –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
channel_ids = [-1002457040012, -1002850244680, -1002763140931, -1002342966703]

# üîó –Ü–Ω–≤–∞–π—Ç-–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª–∏
invite_links = [
    "https://t.me/+K8MxCDL55J03ZGVi",
    "https://t.me/+uylyFvSWa002ZmE6",
    "https://t.me/+PcyxcifpWYI5YWJi",
    "https://t.me/+uU9K2U97lpEyM2Ey"
]

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# üì≤ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i, link in enumerate(invite_links):
        keyboard.insert(InlineKeyboardButton(text=f"–°–ø–æ–Ω—Å–æ—Ä {i+1}", url=link))
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))

    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=keyboard)

# ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'check_subs')
async def check_subscriptions(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    missed = []

    for i, channel_id in enumerate(channel_ids):
        try:
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ['member', 'creator', 'administrator']:
                missed.append(i + 1)
        except Exception:
            missed.append(i + 1)

    if not missed:
        await bot.send_message(user_id, "‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
    else:
        missed_str = ", ".join([f"–°–ø–æ–Ω—Å–æ—Ä {i}" for i in missed])
        await bot.send_message(user_id, f"‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞: {missed_str}. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)